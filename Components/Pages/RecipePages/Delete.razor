@page "/recipes/delete"
@using Microsoft.EntityFrameworkCore
@using Ratatouille.Models
@inject IDbContextFactory<Ratatouille.Data.RatatouilleContext> DbFactory
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<PageTitle>Elimina Ricetta</PageTitle>

@if (recipe is null)
{
    <p style="text-align:center;"><em>Caricamento...</em></p>
}
else
{
    <div class="back-btn-wrapper">
        <a href="/recipes" class="back-btn" title="Indietro">
            <i class="fa-solid fa-arrow-left"></i>
        </a>
    </div>
    <div class="delete-main">
        <div class="delete-title-row">
            <div class="delete-title">Elimina Ricetta</div>
        </div>
        <div class="delete-confirm">
            Sei sicuro di voler eliminare questa ricetta?
        </div>
        @if (!string.IsNullOrWhiteSpace(recipe.ImageURL))
        {
            <img src="@recipe.ImageURL" alt="@recipe.Title" class="delete-img" />
        }
        <div>
            <div class="delete-label">Titolo</div>
            <div class="delete-value">@recipe.Title</div>
        </div>
        <div>
            <div class="delete-label">Descrizione</div>
            <div class="delete-value">@recipe.Description</div>
        </div>
        <div>
            <div class="delete-label">Ingredienti</div>
            <div class="delete-value">@recipe.Ingredients</div>
        </div>
        <EditForm method="post" Model="recipe" OnValidSubmit="DeleteRecipe" FormName="delete" Enhance>
            <div class="delete-actions">
                <button type="submit" class="delete-btn" disabled="@(recipe is null)">
                    <i class="fa-solid fa-trash"></i> Elimina
                </button>
                <a href="/recipes" class="delete-back-link">Torna alla lista</a>
            </div>
        </EditForm>
    </div>
}

@code {
    private Recipe? recipe;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        recipe = await context.Recipe.FirstOrDefaultAsync(m => m.Id == Id);

        if (recipe is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteRecipe()
    {
        using var context = DbFactory.CreateDbContext();
        context.Recipe.Remove(recipe!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/recipes");
    }
}
