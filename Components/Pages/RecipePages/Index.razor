@page "/"
@page "/recipes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Ratatouille.Components
@using Ratatouille.Components.Recipe
@using Ratatouille.Models
@using Ratatouille.Data
@using Ratatouille.Services
@implements IAsyncDisposable
@inject IDbContextFactory<Ratatouille.Data.RatatouilleContext> DbFactory
@inject NavigationManager Navigation
@inject AuthService AuthService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

<PageTitle>Recipes</PageTitle>

<!-- Barra superiore / header -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Recipes</h2>
</div>

<!-- Bottone Add Recipe fisso in basso a destra -->
<NavLink class="recipe-create-btn-fixed" href="recipes/create" title="Aggiungi nuova ricetta">
    <i class="fa-solid fa-plus"></i>
</NavLink>

<div>
    <form class="recipe-search-form" @onsubmit="OnSearch">
        <input type="search"
               class="recipe-search-input"
               placeholder="Cerca ricetta..."
               @bind="searchText"
               @bind:event="oninput" />
        @if (!string.IsNullOrWhiteSpace(searchText))
        {
            <button type="button" class="recipe-search-clear" @onclick="ClearSearch" title="Cancella filtro">
                &#10005;
            </button>
        }
        <!-- <input type="submit" value="Cerca" class="recipe-search-btn" /> -->
    </form>
</div>

<br />

<!-- Griglia di card -->
@if (FilteredRecipes.Any())
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-3">
        @foreach (var recipe in FilteredRecipes)
        {
            <RecipeCard Recipe="@recipe" />
        }
    </div>
}
else
{
    <div class="recipe-empty-message">
        Nessuna ricetta trovata.
        <span class="recipe-empty-reset" @onclick="ClearSearch">Mostra tutte</span>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {

    private RatatouilleContext context = default!;
    private List<Recipe> recipes = new();
    private string? errorMessage;

    private string searchText = string.Empty;


    @code {  
        protected override async Task OnInitializedAsync()  
        {  
            if (!AuthService.IsAuthenticated)
            {
                Navigation.NavigateTo("/login", true);
                return;
            }

            // Se la route è "/" (root), effettua il redirect a "/recipes"  
            if (Navigation.Uri.EndsWith("/"))  
            {  
                Navigation.NavigateTo("/recipes", true);  
            }  
            try  
            {  
                context = DbFactory.CreateDbContext();  
                recipes = await context.Recipe.ToListAsync();  
            }  
            catch (Exception ex)  
            {  
                errorMessage = ex.Message;  
            }  
        }  
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }

    private IEnumerable<Recipe> FilteredRecipes =>
        string.IsNullOrWhiteSpace(searchText)
            ? recipes
            : recipes.Where(r => r.Title?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false);

    private Task OnSearch()
    {
        // Non serve fare nulla, la ricerca è reattiva grazie a @bind
        return Task.CompletedTask;
    }

    private void ClearSearch()
    {
        searchText = string.Empty;
    }
}
