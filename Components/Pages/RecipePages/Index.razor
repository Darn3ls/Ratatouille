@page "/recipes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Ratatouille.Components
@using Ratatouille.Components.Recipe
@using Ratatouille.Models
@using Ratatouille.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Ratatouille.Data.RatatouilleContext> DbFactory

<PageTitle>Recipes</PageTitle>

<!-- Barra superiore / header -->
<div class="d-flex justify-content-between align-items-center mb-3">

    <h2>Ricette</h2>

    <NavLink class="btn btn-warning" href="recipes/create">
        <i class="bi bi-plus"></i> <!-- Icona di esempio con Bootstrap Icons -->
        ADD NEW
    </NavLink>
</div>

<!-- Campo ricerca -->
<div>
    <form action="/recipes" data-enhance>
        <input type="search" name="TitleFilter" />
        <input type="submit" value="Search" />
    </form>
</div>

<br />

<!-- Griglia di card -->
<div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-5 g-3">
    @foreach (var recipe in FilteredRecipes)
    {
		<RecipeCard Recipe="@recipe" />
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private RatatouilleContext context = default!;
    private List<Recipe> recipes = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();
            recipes = await context.Recipe.ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    [SupplyParameterFromQuery]
    private string? TitleFilter { get; set; }

    private IEnumerable<Recipe> FilteredRecipes => string.IsNullOrWhiteSpace(TitleFilter)
        ? recipes
        : recipes.Where(r => r.Title.Contains(TitleFilter, StringComparison.OrdinalIgnoreCase));
}
