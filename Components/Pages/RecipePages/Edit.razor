@page "/recipes/edit"
@using Microsoft.EntityFrameworkCore
@using Ratatouille.Models
@inject IDbContextFactory<Ratatouille.Data.RatatouilleContext> DbFactory
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />

<PageTitle>Modifica Ricetta</PageTitle>

<style>
.edit-main {
    max-width: 900px;
    margin: 2rem auto 0 auto;
    padding: 2.5rem 2rem 2rem 2rem;
    background: #faf9f6;
    border-radius: 24px;
    min-height: 400px;
    box-sizing: border-box;
}
.edit-title-row {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 2rem;
}
.edit-title {
    font-size: 2.2rem;
    font-weight: 700;
    color: #222;
    text-align: left;
    flex: 1;
    word-break: break-word;
}
.edit-back-btn {
    border: none;
    border-radius: 50%;
    width: 36px;
    height: 36px;
    background: #ffe082;
    color: #222;
    box-shadow: 0 1px 4px rgba(0,0,0,0.06);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
    cursor: pointer;
    transition: background 0.2s, box-shadow 0.2s;
    text-decoration: none;
    margin-right: 1rem;
}
.edit-back-btn:hover {
    background: #ffd54f;
    box-shadow: 0 2px 8px rgba(0,0,0,0.12);
}
.edit-label {
    font-weight: 600;
    color: #222;
    margin-bottom: 0.3rem;
    font-size: 1.1rem;
    margin-top: 1.2rem;
    display: block;
}
.edit-input {
    border: none;
    border-radius: 18px;
    padding: 0.6rem 1.2rem;
    font-size: 1rem;
    background: #f5f5f5;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    transition: box-shadow 0.2s;
    outline: none;
    width: 100%;
    margin-bottom: 0.5rem;
}
.edit-input:focus {
    box-shadow: 0 4px 16px rgba(0,0,0,0.12);
    background: #fff;
}
.edit-btn {
    border: none;
    border-radius: 18px;
    padding: 0.6rem 1.4rem;
    font-size: 1rem;
    background: #ffe082;
    color: #222;
    font-weight: 500;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    cursor: pointer;
    transition: background 0.2s, box-shadow 0.2s;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1.5rem;
}
.edit-btn:hover {
    background: #ffd54f;
    box-shadow: 0 4px 16px rgba(0,0,0,0.12);
}
.back-btn-wrapper {
        max-width: 440px;
        margin: auto;
        position: absolute;
        height: 44px;
}
.back-btn {
    position: absolute;
    left: 0;
    top: 0;
    border: none;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    background: #ffe082;
    color: #222;
    box-shadow: 0 2px 8px rgba(0,0,0,0.10);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.3rem;
    cursor: pointer;
    transition: background 0.2s, box-shadow 0.2s;
    text-decoration: none;
    z-index: 2;
}
.back-btn:hover {
    background: #ffd54f;
    box-shadow: 0 4px 16px rgba(0,0,0,0.16);
}
</style>

@if (Recipe is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="back-btn-wrapper">
        <a href="/recipes" class="back-btn" title="Indietro">
            <i class="fa-solid fa-arrow-left"></i>
        </a>
    </div>
    <div class="edit-main">
        <div class="edit-title-row">
            <div class="edit-title">Modifica Ricetta</div>
        </div>
        <EditForm method="post" Model="Recipe" OnValidSubmit="UpdateRecipe" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary role="alert"/>
            <input type="hidden" name="Recipe.Id" value="@Recipe.Id" />
            <div>
                <label for="title" class="edit-label">Titolo</label>
                <InputText id="title" @bind-Value="Recipe.Title" class="edit-input" />
                <ValidationMessage For="() => Recipe.Title" class="text-danger" />
            </div>
            <div>
                <label for="description" class="edit-label">Descrizione</label>
                <InputText id="description" @bind-Value="Recipe.Description" class="edit-input" />
                <ValidationMessage For="() => Recipe.Description" class="text-danger" />
            </div>
            <div>
                <label for="ingredients" class="edit-label">Ingredienti</label>
                <InputText id="ingredients" @bind-Value="Recipe.Ingredients" class="edit-input" />
                <ValidationMessage For="() => Recipe.Ingredients" class="text-danger" />
            </div>
            <div>
                <label for="imageurl" class="edit-label">URL Immagine</label>
                <InputText id="imageurl" @bind-Value="Recipe.ImageURL" class="edit-input" />
                <ValidationMessage For="() => Recipe.ImageURL" class="text-danger" />
            </div>
            <button type="submit" class="edit-btn">
                <i class="fa-solid fa-save"></i> Salva
            </button>
        </EditForm>
    </div>
}
@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Recipe? Recipe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Recipe ??= await context.Recipe.FirstOrDefaultAsync(m => m.Id == Id);

        if (Recipe is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateRecipe()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Recipe!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RecipeExists(Recipe!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/recipes");
    }

    private bool RecipeExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Recipe.Any(e => e.Id == id);
    }
}
